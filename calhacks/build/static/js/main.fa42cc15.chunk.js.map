{"version":3,"sources":["logo.svg","Components/TallBuilding.js","Components/CityArea.js","Example.js","Title.js","Subtitle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CityArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","width","height","color","react_default","a","createElement","name","dist_default","style","background","React","Component","min","max","Math","floor","random","buildings","i","buildingWidth","getRandomInt","toString","buildingHeight","push","TallBuilding","key","className","display","alignItems","createCity","Example","_handleKeyPress","e","console","log","onKeyPress","placeholder","Title","Subtitle","App","src_Title","src_Subtitle","src_Example","Components_CityArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+KCuBzBC,cAlBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,MAAOR,EAAKD,MAAMS,MAClBC,OAAQT,EAAKD,MAAMU,OACnBC,MAAOV,EAAKD,MAAMW,OALPV,wEAUrB,OACUW,EAAAC,EAAAC,cAAA,OAAKC,KAAK,YACnBH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAgBI,MAAO,CAAEC,WAAYd,KAAKI,MAAMG,MAAOF,MAAOL,KAAKI,MAAMC,MAAOC,OAAQN,KAAKI,MAAME,kBAb/ES,IAAMC,WCkCdrB,cAjCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,4EAMNoB,EAAKC,GACd,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,uCAOrD,IAHA,IAAIK,EAAY,GAGPC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAIC,EAAgBxB,KAAKyB,aAAa,EAAG,GAAGC,WAAa,KACrDC,EAAiB3B,KAAKyB,aAAa,EAAG,IAAIC,WAAa,KAE3DJ,EAAUM,KAAKpB,EAAAC,EAAAC,cAACmB,EAAD,CAAcC,IAAOP,EAAGlB,MAAOmB,EAAelB,OAAUqB,EAAgBpB,MADnE,aAGxB,OAAOe,mCAIb,OAECd,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,YAAYlB,MAAO,CAAEC,WAAY,UAAWT,MAAO,OAAQC,OAAQ,QAAS0B,QAAQ,OAAQC,WAAW,aAC5GjC,KAAKkC,qBA5BKnB,IAAMC,WCedmB,oNAbdC,gBAAkB,SAACC,GACF,UAAVA,EAAEP,KACJQ,QAAQC,IAAI,wFAKd,OACC/B,EAAAC,EAAAC,cAAA,SAAO8B,WAAYxC,KAAKoC,gBAAkBK,YAAc,iCATvCzB,cCOP0B,mLAPX,OACClC,EAAAC,EAAAC,cAAA,sCAHeM,aCQL2B,mLANX,OACCnC,EAAAC,EAAAC,cAAA,uEAHkBM,aCqBR4B,mLAZX,OAEEpC,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OACbvB,EAAAC,EAAAC,cAACmC,EAAD,MACDrC,EAAAC,EAAAC,cAACoC,EAAD,MACCtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,cATUhC,aCGEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fa42cc15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactRectangle from 'react-rectangle';\n\nclass CityArea extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            width: this.props.width,\n            height: this.props.height,\n            color: this.props.color\n        };\n    }\n\n    render() {\n\t\treturn (\n            <div name=\"building\">\n\t\t\t<ReactRectangle style={{ background: this.state.color, width: this.state.width, height: this.state.height }} />\n            </div>\n        )\n    }\n}\n\nexport default CityArea;","import React from 'react';\nimport TallBuilding from './TallBuilding';\nimport ReactDOM from 'react-dom';\n\nclass CityArea extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\t\t};\n    }\n\n    getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    createCity() {\n        let buildings = [];\n        let startX = 0;\n        let endX = 400;\n        for (let i = 0; i < 30; i++) {\n            let buildingWidth = this.getRandomInt(2, 6).toString() + \"vw\";\n            let buildingHeight = this.getRandomInt(1, 50).toString() + \"vh\";\n            let buildingColor = \"#000080\";\n            buildings.push(<TallBuilding key = {i} width={buildingWidth} height = {buildingHeight} color = {buildingColor}/>)\n        }\n        return buildings;\n    }\n\n    render() {\n\t\treturn (\n\t\t\t// Creates the square\n\t\t\t<div className=\"container\" style={{ background: \"#000000\", width: \"100%\", height: \"500px\", display:\"flex\", alignItems:\"flex-end\"}}>\n            {this.createCity()}\n            </div>\n\t\t)\n\t}\n}\n\nexport default CityArea;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass Example extends Component {\n\t_handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      console.log('do validate');\n    }\n  }\n\n  render() {\n    return (\n    \t<input onKeyPress={this._handleKeyPress}  placeholder = \"Type in your thoughts\"/>\n    );\n  }\n}\n\nexport default Example;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Title extends Component {\n  render() {\n    return (\n    \t<h1> Light the Night </h1>\n\n    );\n  }\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport './App.css';\n\nclass Subtitle extends Component {\n  render() {\n    return (\n    \t<h2> Type in your thoughts and watch the skyline glow.</h2>\n    );\n  }\n}\n\nexport default Subtitle;","import React, { Component } from 'react';\nimport './App.css';\nimport CityArea from './Components/CityArea';\nimport './App.css';\nimport Example from './Example';\nimport Title from './Title';\nimport Subtitle from './Subtitle';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n \n      <div className=\"App\">\n        <Title/>\n    \t  <Subtitle/>\n        <Example/>\n        <CityArea/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}